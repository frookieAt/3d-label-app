def generate_blender_scaling_script(height_mm, width_mm=None, depth_mm=None, script_path="scripts/scale_model.py"):
    scale_lines = [
        "import bpy",
        "import os",
        "",
        "# Get active object",
        "obj = bpy.context.active_object",
        "if obj is None:",
        "    raise Exception('No active object in Blender.')",
        "",
        "# Get current bounding box dimensions (in meters)",
        "bbox = [obj.matrix_world @ v.co for v in obj.data.vertices]",
        "min_corner = [min([v[i] for v in bbox]) for i in range(3)]",
        "max_corner = [max([v[i] for v in bbox]) for i in range(3)]",
        "current_dims = [max_corner[i] - min_corner[i] for i in range(3)]",
        "",
        "# Desired dimensions in meters",
        f"target_height = {height_mm / 1000}",
        f"target_width = {width_mm / 1000 if width_mm else 'None'}",
        f"target_depth = {depth_mm / 1000 if depth_mm else 'None'}",
        "",
        "# Calculate scale factors",
        "scale_factors = [1, 1, 1]",
        "if current_dims[2] != 0:",
        "    scale_factors[2] = target_height / current_dims[2]",
        "if target_width and current_dims[0] != 0:",
        "    scale_factors[0] = target_width / current_dims[0]",
        "if target_depth and current_dims[1] != 0:",
        "    scale_factors[1] = target_depth / current_dims[1]",
        "",
        "# Apply scaling",
        "obj.scale[0] *= scale_factors[0]",
        "obj.scale[1] *= scale_factors[1]",
        "obj.scale[2] *= scale_factors[2]",
        "",
        "# Apply scale transforms",
        "bpy.ops.object.transform_apply(scale=True)",
        "",
        "# Output new dimensions",
        "bbox = [obj.matrix_world @ v.co for v in obj.data.vertices]",
        "min_corner = [min([v[i] for v in bbox]) for i in range(3)]",
        "max_corner = [max([v[i] for v in bbox]) for i in range(3)]",
        "new_dims = [round((max_corner[i] - min_corner[i]) * 1000, 2) for i in range(3)]",
        "print(f'✅ Scaled Dimensions (mm): Width: {new_dims[0]}, Depth: {new_dims[1]}, Height: {new_dims[2]}')",
        "",
        "# Save updated .blend",
        "blend_path = os.path.abspath('output/scaled_model.blend')",
        "bpy.ops.wm.save_as_mainfile(filepath=blend_path)",
        "print(f'✅ Saved to {blend_path}')"
    ]

    with open(script_path, "w") as f:
        f.write("\n".join(scale_lines))
